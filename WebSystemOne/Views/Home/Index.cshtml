@model IEnumerable<WebSystemOne.ViewModel.StatementViewModel>

@{
    ViewData["Title"] = "Мои заявления";
}

<div class="container">
    <div class="row mb-4">
        <div class="col-lg-12">
            <div class="content-wrapper fade-in">
                <div class="d-sm-flex align-items-center justify-content-between mb-4">
                    <h1 class="h3 mb-0">
                        <i class="bi bi-clipboard-data me-2 text-primary"></i>Мои заявления
                    </h1>
                    <a href="/Home/Privacy" class="btn btn-primary">
                        <i class="bi bi-plus-circle me-1"></i> Новый отзыв
                    </a>
                </div>
                
                <div class="row mb-4">
                    <div class="col-md-3 col-sm-6 mb-3 mb-md-0">
                        <div class="card border-left-primary">
                            <div class="card-body">
                                <div class="row no-gutters align-items-center">
                                    <div class="col mr-2">
                                        <div class="text-xs font-weight-bold text-primary text-uppercase mb-1">
                                            Всего заявлений
                                        </div>
                                        <div class="h5 mb-0 font-weight-bold text-gray-800" id="total-applications">
                                            @(Model != null ? Model.Count() : 0)
                                        </div>
                                    </div>
                                    <div class="col-auto">
                                        <i class="bi bi-file-text fa-2x text-gray-300"></i>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="col-md-3 col-sm-6 mb-3 mb-md-0">
                        <div class="card border-left-success">
                            <div class="card-body">
                                <div class="row no-gutters align-items-center">
                                    <div class="col mr-2">
                                        <div class="text-xs font-weight-bold text-success text-uppercase mb-1">
                                            Зарегистрированные
                                        </div>
                                        <div class="h5 mb-0 font-weight-bold text-gray-800" id="registered-count">
                                            @(Model != null ? Model.Count(x => x.Name == "Запрос зарегистрирован") : 0)
                                        </div>
                                    </div>
                                    <div class="col-auto">
                                        <i class="bi bi-check-circle fa-2x text-gray-300"></i>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="col-md-3 col-sm-6 mb-3 mb-md-0">
                        <div class="card border-left-info">
                            <div class="card-body">
                                <div class="row no-gutters align-items-center">
                                    <div class="col mr-2">
                                        <div class="text-xs font-weight-bold text-info text-uppercase mb-1">
                                            В обработке
                                        </div>
                                        <div class="h5 mb-0 font-weight-bold text-gray-800" id="in-process-count">
                                            @(Model != null ? Model.Count(x => x.Name == "Запрос подан" || x.Name == "Запрос доставлен в ведомство") : 0)
                                        </div>
                                    </div>
                                    <div class="col-auto">
                                        <i class="bi bi-hourglass-split fa-2x text-gray-300"></i>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="col-md-3 col-sm-6">
                        <div class="card border-left-danger">
                            <div class="card-body">
                                <div class="row no-gutters align-items-center">
                                    <div class="col mr-2">
                                        <div class="text-xs font-weight-bold text-danger text-uppercase mb-1">
                                            Не доставлены
                                        </div>
                                        <div class="h5 mb-0 font-weight-bold text-gray-800" id="not-delivered-count">
                                            @(Model != null ? Model.Count(x => x.Name == "Запрос не доставлен") : 0)
                                        </div>
                                    </div>
                                    <div class="col-auto">
                                        <i class="bi bi-exclamation-triangle fa-2x text-gray-300"></i>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                
                <div class="card shadow mb-4">
                    <div class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
                        <h6 class="m-0 font-weight-bold text-primary">
                            <i class="bi bi-list-check me-1"></i> 
                            Список заявлений
                        </h6>
                        <div class="dropdown no-arrow">
                            <div class="d-flex align-items-center">
                                <small class="text-muted me-2">Автообновление каждые 30 секунд</small>
                                <button id="refresh-button" class="btn btn-sm btn-outline-secondary">
                                    <i class="bi bi-arrow-clockwise"></i> Обновить
                                </button>
                            </div>
                        </div>
                    </div>
                    <div class="card-body p-0">
                        <div class="table-responsive">
                            <table id="applications-table" class="table">
                                <thead>
                                    <tr>
                                        <th><i class="bi bi-hash me-1"></i> Номер заявки</th>
                                        <th><i class="bi bi-calendar-date me-1"></i> Дата создания</th>
                                        <th><i class="bi bi-flag me-1"></i> Статус</th>
                                        <th class="text-center"><i class="bi bi-eye me-1"></i> Действия</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @if (Model != null && Model.Any())
                                    {
                                        foreach (var item in Model)
                                        {
                                            <tr>
                                                <td data-label="Номер заявки">
                                                    <span class="fw-bold">@item.ServiceNumber</span>
                                                </td>
                                                <td data-label="Дата создания">
                                                    <i class="bi bi-calendar-date text-muted me-1"></i>
                                                    @item.Created.ToString("dd.MM.yyyy HH:mm")
                                                </td>
                                                <td data-label="Статус">
                                                    @{
                                                        var statusBadgeClass = "";
                                                        var statusIcon = "";
                                                        
                                                        switch (item.Name) {
                                                            case "Запрос подан":
                                                                statusBadgeClass = "badge bg-primary";
                                                                statusIcon = "bi-arrow-right-circle";
                                                                break;
                                                            case "Запрос доставлен в ведомство":
                                                                statusBadgeClass = "badge bg-info";
                                                                statusIcon = "bi-arrow-down-circle";
                                                                break;
                                                            case "Запрос не доставлен":
                                                                statusBadgeClass = "badge bg-danger";
                                                                statusIcon = "bi-x-circle";
                                                                break;
                                                            case "Запрос зарегистрирован":
                                                                statusBadgeClass = "badge bg-success";
                                                                statusIcon = "bi-check-circle";
                                                                break;
                                                            default:
                                                                statusBadgeClass = "badge bg-secondary";
                                                                statusIcon = "bi-question-circle";
                                                                break;
                                                        }
                                                    }
                                                    
                                                    <span class="@statusBadgeClass">
                                                        <i class="bi @statusIcon me-1"></i>
                                                        @item.Name
                                                    </span>
                                                </td>
                                                <td data-label="Действия" class="text-center">
                                                    <button type="button" class="btn btn-sm btn-outline-primary view-details" data-id="@item.Id">
                                                        <i class="bi bi-eye"></i> Подробнее
                                                    </button>
                                                </td>
                                            </tr>
                                        }
                                    }
                                    else
                                    {
                                        <tr id="no-data-row">
                                            <td colspan="4" class="text-center py-5">
                                                <div class="empty-state">
                                                    <i class="bi bi-inbox display-1 text-muted mb-3"></i>
                                                    <h5>Нет заявлений</h5>
                                                    <p class="text-muted">У вас пока нет созданных заявлений.</p>
                                                    <a href="/Home/Privacy" class="btn btn-primary mt-2">
                                                        <i class="bi bi-plus-circle me-1"></i> Создать заявление
                                                    </a>
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Модальное окно для отображения деталей заявления -->
<div class="modal fade" id="applicationModal" tabindex="-1" aria-labelledby="applicationModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="applicationModalLabel">Детали заявления</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="application-details">
                    <div class="mb-3">
                        <label class="form-label fw-bold">Номер заявления:</label>
                        <p id="modal-service-number" class="bg-light p-2 rounded">-</p>
                    </div>
                    <div class="mb-3">
                        <label class="form-label fw-bold">Дата создания:</label>
                        <p id="modal-date" class="bg-light p-2 rounded">-</p>
                    </div>
                    <div class="mb-3">
                        <label class="form-label fw-bold">Статус:</label>
                        <p id="modal-status" class="bg-light p-2 rounded">-</p>
                    </div>
                    <div class="mb-3">
                        <label class="form-label fw-bold">История статусов:</label>
                        <div id="modal-status-history" class="bg-light p-2 rounded">
                            <ul class="timeline">
                                <li class="timeline-item">
                                    <i class="bi bi-circle-fill text-primary"></i>
                                    <span class="timeline-date">01.03.2025</span>
                                    <p class="timeline-content">Запрос создан</p>
                                </li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Закрыть</button>
            </div>
        </div>
    </div>
</div>

<!-- Контейнер для уведомлений -->
<div id="toast-container" class="toast-container position-fixed bottom-0 end-0 p-3"></div>

<style>
    .card.border-left-primary {
        border-left: 4px solid var(--primary);
    }
    
    .card.border-left-success {
        border-left: 4px solid var(--success);
    }
    
    .card.border-left-info {
        border-left: 4px solid var(--info);
    }
    
    .card.border-left-danger {
        border-left: 4px solid var(--danger);
    }

    .empty-state {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        padding: 2rem;
    }

    .timeline {
        list-style: none;
        padding-left: 0;
    }
    
    .timeline-item {
        position: relative;
        padding-left: 1.5rem;
        padding-bottom: 1.5rem;
        border-left: 1px solid #e0e0e0;
    }
    
    .timeline-item:last-child {
        padding-bottom: 0;
    }
    
    .timeline-item i {
        position: absolute;
        left: -0.5rem;
        top: 0;
        font-size: 0.75rem;
    }
    
    .timeline-date {
        display: block;
        font-size: 0.8rem;
        color: #6c757d;
        margin-bottom: 0.25rem;
    }
    
    .timeline-content {
        margin: 0;
    }
    
    @@keyframes pulse {
        0% { transform: scale(1); }
        50% { transform: scale(1.05); }
        100% { transform: scale(1); }
    }
    
    .badge.bg-primary, .badge.bg-info {
        animation: pulse 2s infinite;
    }
    
    .loading {
        display: inline-block;
        position: relative;
        width: 64px;
        height: 64px;
    }
    
    .loading div {
        position: absolute;
        border: 4px solid var(--primary);
        opacity: 1;
        border-radius: 50%;
        animation: loading 1.5s cubic-bezier(0, 0.2, 0.8, 1) infinite;
    }
    
    .loading div:nth-child(2) {
        animation-delay: -0.5s;
    }
    
    @@keyframes loading {
        0% {
            top: 28px;
            left: 28px;
            width: 0;
            height: 0;
            opacity: 1;
        }
        100% {
            top: -1px;
            left: -1px;
            width: 58px;
            height: 58px;
            opacity: 0;
        }
    }
</style>

@section Scripts {
    <script>
        // Глобальные переменные
        let applicationsData = [];
        let isUpdating = false;
        let lastSuccessfulRequest = Date.now();
        let failedRequestsCount = 0;

        // Функция для незаметной перезагрузки страницы при проблемах с соединением
        function setupSilentPageRefresh() {
            // Сохранение состояния пользователя перед обновлением
            function saveUserState() {
                // Сохраняем позицию прокрутки
                sessionStorage.setItem('scrollPos', window.scrollY);

                // Сохраняем данные приложения, если они есть
                if (applicationsData && applicationsData.length > 0) {
                    sessionStorage.setItem('lastApplicationsData', JSON.stringify(applicationsData));
                }
            }

            // Восстановление состояния после обновления
            function restoreUserState() {
                // Восстанавливаем позицию прокрутки
                const scrollPos = sessionStorage.getItem('scrollPos');
                if (scrollPos) {
                    window.scrollTo(0, parseInt(scrollPos));
                    sessionStorage.removeItem('scrollPos');
                }

                // Восстанавливаем данные, если они были сохранены
                const savedData = sessionStorage.getItem('lastApplicationsData');
                if (savedData) {
                    try {
                        const parsedData = JSON.parse(savedData);
                        if (parsedData && parsedData.length > 0) {
                            applicationsData = parsedData;
                            // Не показываем уведомление при восстановлении данных
                            updateStats(parsedData);
                        }

                        sessionStorage.removeItem('lastApplicationsData');
                    } catch (e) {
                        console.error('Ошибка при восстановлении данных:', e);
                    }
                }
            }

            // Выполнить перезагрузку страницы
            function performSilentRefresh() {
                console.log("Выполняю незаметную перезагрузку страницы...");

                // Сохраняем состояние пользователя
                saveUserState();

                // Небольшая задержка перед перезагрузкой
                setTimeout(function () {
                    window.location.reload(true);
                }, 300);
            }

            // Восстанавливаем состояние при загрузке страницы
            restoreUserState();

            // Возвращаем функцию для проверки и перезагрузки при необходимости
            return function checkAndRefresh(isError) {
                if (isError) {
                    const timeSinceLastSuccess = Date.now() - lastSuccessfulRequest;

                    // Если прошло больше 60 секунд с последнего успешного запроса
                    if (timeSinceLastSuccess > 60000) {
                        failedRequestsCount++;

                        // После 2 последовательных ошибок перезагружаем страницу
                        if (failedRequestsCount >= 2) {
                            performSilentRefresh();
                        }
                    }
                } else {
                    // Сбрасываем счетчик ошибок при успешном запросе
                    lastSuccessfulRequest = Date.now();
                    failedRequestsCount = 0;
                }
            };
        }

        // Инициализируем функцию перезагрузки
        const checkAndRefreshPage = setupSilentPageRefresh();

        // Функция обновления статистики
        function updateStats(data) {
            const totalCount = data.length;
            const registeredCount = data.filter(x => x.name === "Запрос зарегистрирован").length;
            const inProcessCount = data.filter(x => x.name === "Запрос подан" || x.name === "Запрос доставлен в ведомство").length;
            const notDeliveredCount = data.filter(x => x.name === "Запрос не доставлен").length;

            animateCounter('total-applications', totalCount);
            animateCounter('registered-count', registeredCount);
            animateCounter('in-process-count', inProcessCount);
            animateCounter('not-delivered-count', notDeliveredCount);
        }

        // Функция анимации счетчиков
        function animateCounter(elementId, targetValue) {
            const element = document.getElementById(elementId);
            if (!element) return;

            const currentValue = parseInt(element.textContent) || 0;
            const step = 10; // ms
            const diff = targetValue - currentValue;
            const duration = 500; // ms
            const increment = Math.abs(diff) > 0 ? diff / (duration / step) : 0;

            let value = currentValue;
            const interval = setInterval(() => {
                value += increment;
                if ((increment >= 0 && value >= targetValue) ||
                    (increment < 0 && value <= targetValue)) {
                    value = targetValue;
                    clearInterval(interval);
                }
                element.textContent = Math.round(value);
            }, step);
        }

        // Функция обновления списка заявлений
        function updateApplicationsList(forceRefresh = false) {
            if (isUpdating) return;

            isUpdating = true;
            $('#refresh-button').html('<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Обновление...');
            $('#refresh-button').prop('disabled', true);

            // Ajax запрос для получения данных
            $.ajax({
                url: '@Url.Action("GetApplications", "Home")',
                type: 'GET',
                // Предотвращаем кэширование
                data: { _t: new Date().getTime() },
                cache: false,
                dataType: 'json',
                success: function (data) {
                    // Сохраняем данные для использования в модальном окне
                    let dataChanged = false;

                    // Проверяем, изменились ли данные
                    if (applicationsData.length !== data.length) {
                        dataChanged = true;
                    } else {
                        // Сравниваем статусы заявлений
                        for (let i = 0; i < data.length; i++) {
                            const oldItem = applicationsData.find(app => app.id === data[i].id);
                            if (!oldItem || oldItem.name !== data[i].name) {
                                dataChanged = true;
                                break;
                            }
                        }
                    }

                    // Обновляем данные в памяти
                    applicationsData = data;

                    // Обновляем статистику всегда
                    updateStats(data);

                    // Обновляем таблицу только если данные изменились или это принудительное обновление
                    if (dataChanged || forceRefresh) {
                        const tbody = $('#applications-table tbody');
                        tbody.empty();

                        if (data && data.length > 0) {
                            // Добавляем строки с данными
                            data.forEach(function (item) {
                                const date = new Date(item.created);
                                const formattedDate = date.toLocaleDateString('ru-RU') + ' ' +
                                    date.toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' });

                                // Определяем стиль статуса
                                let statusBadgeClass = '';
                                let statusIcon = '';

                                switch (item.name) {
                                    case 'Запрос подан':
                                        statusBadgeClass = 'badge bg-primary';
                                        statusIcon = 'bi-arrow-right-circle';
                                        break;
                                    case 'Запрос доставлен в ведомство':
                                        statusBadgeClass = 'badge bg-info';
                                        statusIcon = 'bi-arrow-down-circle';
                                        break;
                                    case 'Запрос не доставлен':
                                        statusBadgeClass = 'badge bg-danger';
                                        statusIcon = 'bi-x-circle';
                                        break;
                                    case 'Запрос зарегистрирован':
                                        statusBadgeClass = 'badge bg-success';
                                        statusIcon = 'bi-check-circle';
                                        break;
                                    default:
                                        statusBadgeClass = 'badge bg-secondary';
                                        statusIcon = 'bi-question-circle';
                                        break;
                                }

                                // Формируем HTML строки
                                const row = `
                                        <tr class="fade-in">
                                            <td data-label="Номер заявки">
                                                <span class="fw-bold">${item.serviceNumber}</span>
                                            </td>
                                            <td data-label="Дата создания">
                                                <i class="bi bi-calendar-date text-muted me-1"></i>
                                                ${formattedDate}
                                            </td>
                                            <td data-label="Статус">
                                                <span class="${statusBadgeClass}">
                                                    <i class="bi ${statusIcon} me-1"></i>
                                                    ${item.name}
                                                </span>
                                            </td>
                                            <td data-label="Действия" class="text-center">
                                                <button type="button" class="btn btn-sm btn-outline-primary view-details" data-id="${item.id}">
                                                    <i class="bi bi-eye"></i> Подробнее
                                                </button>
                                            </td>
                                        </tr>`;
                                tbody.append(row);
                            });

                            // Привязываем обработчики для кнопок "Подробнее"
                            attachViewDetailsHandlers();

                            if (dataChanged && !forceRefresh) {
                                showToast('Статусы заявлений обновлены', 'success');
                            }
                        } else {
                            // Если данных нет - показываем соответствующее сообщение
                            tbody.append(`
                                    <tr id="no-data-row">
                                        <td colspan="4" class="text-center py-5">
                                            <div class="empty-state">
                                                <i class="bi bi-inbox display-1 text-muted mb-3"></i>
                                                <h5>Нет заявлений</h5>
                                                <p class="text-muted">У вас пока нет созданных заявлений.</p>
                                                <a href="/Home/Privacy" class="btn btn-primary mt-2">
                                                    <i class="bi bi-plus-circle me-1"></i> Создать заявление
                                                </a>
                                            </div>
                                        </td>
                                    </tr>
                                `);
                        }
                    }

                    // Отмечаем успешный запрос для системы перезагрузки
                    checkAndRefreshPage(false);
                },
                error: function (xhr, status, error) {
                    console.error('Ошибка при получении данных:', error);
                    showToast('Ошибка при получении данных', 'error');

                    // Отмечаем ошибку для системы перезагрузки
                    checkAndRefreshPage(true);
                },
                complete: function () {
                    // Восстанавливаем состояние кнопки обновления
                    $('#refresh-button').html('<i class="bi bi-arrow-clockwise"></i> Обновить');
                    $('#refresh-button').prop('disabled', false);
                    isUpdating = false;
                }
            });
        }

        // Функция для отображения деталей заявления
        function showApplicationDetails(id) {
            // Поиск заявления по ID
            const application = applicationsData.find(app => app.id === id);

            if (application) {
                // Заполнение модального окна данными
                $('#modal-service-number').text(application.serviceNumber);

                // Форматируем дату только с числом, без времени
                const date = new Date(application.created);
                const formattedDate = date.toLocaleDateString('ru-RU');
                $('#modal-date').text(formattedDate);

                // Установка HTML-кода статуса с соответствующим форматированием
                let statusHtml = '';
                switch (application.name) {
                    case 'Запрос подан':
                        statusHtml = '<span class="badge bg-primary"><i class="bi bi-arrow-right-circle me-1"></i> Запрос подан</span>';
                        break;
                    case 'Запрос доставлен в ведомство':
                        statusHtml = '<span class="badge bg-info"><i class="bi bi-arrow-down-circle me-1"></i> Запрос доставлен в ведомство</span>';
                        break;
                    case 'Запрос не доставлен':
                        statusHtml = '<span class="badge bg-danger"><i class="bi bi-x-circle me-1"></i> Запрос не доставлен</span>';
                        break;
                    case 'Запрос зарегистрирован':
                        statusHtml = '<span class="badge bg-success"><i class="bi bi-check-circle me-1"></i> Запрос зарегистрирован</span>';
                        break;
                    default:
                        statusHtml = '<span class="badge bg-secondary"><i class="bi bi-question-circle me-1"></i> ' + application.name + '</span>';
                }
                $('#modal-status').html(statusHtml);

                // Генерация истории статусов
                const historyHtml = getMockStatusHistory(application);
                $('#modal-status-history').html(historyHtml);

                // Показываем модальное окно с помощью Bootstrap
                var myModal = new bootstrap.Modal(document.getElementById('applicationModal'));
                myModal.show();
            } else {
                showToast('Заявление не найдено', 'error');
            }
        }

        // Функция для генерации истории статусов
        function getMockStatusHistory(application) {
            const created = new Date(application.created);

            // Форматирование даты без времени
            const formatDate = (date) => {
                return date.toLocaleDateString('ru-RU');
            };

            let history = `
                        <ul class="timeline">
                            <li class="timeline-item">
                                <i class="bi bi-circle-fill text-primary"></i>
                                <span class="timeline-date">${formatDate(created)}</span>
                                <p class="timeline-content">Запрос создан</p>
                            </li>
                    `;

            if (application.name === 'Запрос подан' ||
                application.name === 'Запрос доставлен в ведомство' ||
                application.name === 'Запрос зарегистрирован') {

                const submittedDate = new Date(created);
                submittedDate.setDate(submittedDate.getDate());

                history += `
                            <li class="timeline-item">
                                <i class="bi bi-circle-fill text-primary"></i>
                                <span class="timeline-date">${formatDate(submittedDate)}</span>
                                <p class="timeline-content">Запрос подан</p>
                            </li>
                        `;

                if (application.name === 'Запрос доставлен в ведомство' ||
                    application.name === 'Запрос зарегистрирован') {

                    const deliveredDate = new Date(created);
                    deliveredDate.setDate(deliveredDate.getDate() + 1);

                    history += `
                                <li class="timeline-item">
                                    <i class="bi bi-circle-fill text-info"></i>
                                    <span class="timeline-date">${formatDate(deliveredDate)}</span>
                                    <p class="timeline-content">Запрос доставлен в ведомство</p>
                                </li>
                            `;

                    if (application.name === 'Запрос зарегистрирован') {
                        const registeredDate = new Date(created);
                        registeredDate.setDate(registeredDate.getDate() + 2);

                        history += `
                                    <li class="timeline-item">
                                        <i class="bi bi-circle-fill text-success"></i>
                                        <span class="timeline-date">${formatDate(registeredDate)}</span>
                                        <p class="timeline-content">Запрос зарегистрирован</p>
                                    </li>
                                `;
                    }
                }
            } else if (application.name === 'Запрос не доставлен') {
                const submittedDate = new Date(created);
                submittedDate.setDate(submittedDate.getDate());

                history += `
                            <li class="timeline-item">
                                <i class="bi bi-circle-fill text-primary"></i>
                                <span class="timeline-date">${formatDate(submittedDate)}</span>
                                <p class="timeline-content">Запрос подан</p>
                            </li>
                        `;

                const notDeliveredDate = new Date(created);
                notDeliveredDate.setDate(notDeliveredDate.getDate() + 1);

                history += `
                            <li class="timeline-item">
                                <i class="bi bi-circle-fill text-danger"></i>
                                <span class="timeline-date">${formatDate(notDeliveredDate)}</span>
                                <p class="timeline-content">Запрос не доставлен</p>
                            </li>
                        `;
            }

            history += '</ul>';

            return history;
        }

        // Функция для привязки обработчиков событий к кнопкам
        function attachViewDetailsHandlers() {
            $('.view-details').off('click').on('click', function () {
                const id = $(this).data('id');
                showApplicationDetails(id);
            });
        }

        // Функция для отображения уведомлений
        function showToast(message, type = 'success') {
            const bgClass = type === 'success' ? 'bg-success' : 'bg-danger';
            const iconClass = type === 'success' ? 'bi-check-circle' : 'bi-exclamation-circle';

            const toastId = 'toast-' + Date.now();
            const toast = `
                        <div id="${toastId}" class="toast ${bgClass} text-white" role="alert" aria-live="assertive" aria-atomic="true">
                            <div class="toast-header">
                                <i class="bi ${iconClass} me-2"></i>
                                <strong class="me-auto">Уведомление</strong>
                                <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
                            </div>
                            <div class="toast-body">
                                ${message}
                            </div>
                        </div>
                    `;

            $('#toast-container').append(toast);

            const toastElement = new bootstrap.Toast(document.getElementById(toastId), {
                delay: 3000
            });

            toastElement.show();

            // Удаляем уведомление после скрытия
            $(`#${toastId}`).on('hidden.bs.toast', function () {
                $(this).remove();
            });
        }

        // Сохранение состояния страницы перед обновлением
        function saveUserState() {
            // Сохраняем позицию прокрутки
            sessionStorage.setItem('scrollPos', window.scrollY);

            // Сохраняем данные приложения, если они есть
            if (applicationsData && applicationsData.length > 0) {
                sessionStorage.setItem('lastApplicationsData', JSON.stringify(applicationsData));
            }
        }

        // Инициализация при загрузке страницы
        $(document).ready(function () {
            // Счетчик обновлений
            let updateCount = 0;

            // Сразу привязываем обработчики для уже существующих кнопок
            attachViewDetailsHandlers();

            // Первичное обновление при загрузке
            updateApplicationsList(true);

            // Устанавливаем интервал для автообновления
            const updateInterval = setInterval(function () {
                updateCount++;

                // Каждое второе обновление (60 секунд) принудительно перезагружаем страницу
                if (updateCount >= 2) {
                    console.log("Выполняется плановое обновление страницы...");
                    saveUserState();
                    window.location.reload(true);
                    return;
                }

                // Обычное обновление
                updateApplicationsList(false);
            }, 30000);

            // Обработчик нажатия на кнопку обновления
            $('#refresh-button').on('click', function () {
                // При нажатии на кнопку принудительно перезагружаем всю страницу
                saveUserState();
                window.location.reload(true);
            });

            // Очистка интервала при закрытии страницы
            $(window).on('unload', function () {
                clearInterval(updateInterval);
            });

            // Если был отправлен отзыв, обновляем список после небольшой задержки
            if (@(TempData["FeedbackStatus"] != null ? "true" : "false")) {
                setTimeout(function () {
                    updateApplicationsList(true);
                    showToast('Ваш отзыв успешно отправлен!', 'success');
                }, 1000);
            }
        });
    </script>
}